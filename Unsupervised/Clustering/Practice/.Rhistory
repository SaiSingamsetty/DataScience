rmseMedian = rmse(churn_mv$Day.Charge, churn_mv$Daily.Charges.MV.Median)
#dropping two cols
churn_mv$Day.Charge = NULL
churn_mv$Daily.Charges.MV = NULL
churn_mv$Daily.Charges.MV.Median = NULL
######  Outlier Treatment ######
boxplot(churn_mv)
Removeoutliers = function(x){
x = summary(x)
top = x[5] + (1.5*IQR(x))
bottom = x[2] - (1.5*IQR(x))
x = ifelse(x > top, top, x)
x = ifelse(x < bottom, bottom, x)
}
boxplot(churn_mv$Account.Length)
boxplot(churn_mv$Day.Mins)
churn_mv$Day.Mins = Removeoutliers(churn_mv$Day.Mins)
Removeoutliers(churn_mv$Day.Mins)
boxplot(churn_mv$Day.Mins)
churn_mv$Day.Mins = Removeoutliers(churn_mv$Day.Mins)
churn_mv$Day.Mins = Removeoutliers(churn_mv$Day.Mins)
Removeoutliers = function(x){
x = summary(x)
top = x[5] + (1.5*IQR(x))
bottom = x[2] - (1.5*IQR(x))
x = ifelse(x > top, top, x)
x = ifelse(x < bottom, bottom, x)
return(x)
}
boxplot(churn_mv$Day.Mins)
churn_mv$Day.Mins = Removeoutliers(churn_mv$Day.Mins)
summary(churn_mv$Day.Mins)
Removeoutliers = function(x){
x = summary(x)
top = x[5] + (1.5*IQR(x))
bottom = x[2] - (1.5*IQR(x))
x = ifelse((x>top),x,(ifelse(x<bottom,bottom,x)))
return(x)
}
boxplot(churn_mv$Day.Mins)
churn_mv$Day.Mins = Removeoutliers(churn_mv$Day.Mins)
Removeoutliers = function(x){
q3=quantile(x, 0.75)
q1=quantile(x, 0.25)
range= 1.5*IQR(x)
upperbound=q3+range
lowerBound=q1-range
x=ifelse((x>upperbound),upperbound,ifelse((x<lowerBound),lowerBound,x))
return(x)
}
boxplot(churn_mv$Day.Mins)
churn_mv$Day.Mins = Removeoutliers(churn_mv$Day.Mins)
summary(churn_mv$Day.Mins)
churn_mv[,numCols] = lapply(churn_mv[,numcols], Removeoutliers)
churn_mv[,numCols] = lapply(churn_mv[,numCols], Removeoutliers)
View(churn_mv)
churn_mv[,numCols] = lapply(churn_mv[,numCols], Removeoutliers)
churn_mv[,numCols]=lapply(churn_mv[,numCols], Removeoutliers)
View(churn_mv[,numCols])
numCols
#Since Columns has got updated, Let us refresh once
names = colnames(churn_mv)
charCols=c("Churn","Intl.Plan","VMail.Plan","State","Area.Code","Phone")
numCols=setdiff(names,charCols)
churn_mv[,numCols]=lapply(churn_mv[,numCols], Removeoutliers)
######  Outlier Treatment ######
boxplot(churn_mv)
churn_num = churn_mv[,numCols]
churn_cat = churn_mv[,charCols]
# Min Max Scaling
# Scale the data by excluding Target Variable
churn_minmax = lapply(churn_num, minmaxscale)
# Min Max Scaling
# Scale the data by excluding Target Variable
churn_minmax = as.data.frame(lapply(churn_num, minmaxscale))
View(churn_minmax)
View(churn_minmax)
names(churn_num)
# Min Max Scaling
# Scale the data by excluding Target Variable
churn_minmax = as.data.frame(lapply(churn_num[,-7], minmaxscale))
View(churn_minmax)
View(churn_minmax)
minmaxscale = function(x){
return((x-min(x))/(max(x)-min(x)))
}
# Min Max Scaling
# Scale the data by excluding Target Variable
churn_minmax = as.data.frame(lapply(churn_num[,-7], minmaxscale))
View(churn_minmax)
View(churn_minmax)
churn_minmax$CustServ.Calls = churn_num$CustServ.Calls
minmaxBind = cbind(churn_minmax, churn_cat)
# Z Scaling
churn_Zscale = as.data.frame(scale(churn_num[,-7]))
churn_Zscale$CustServ.Calls = churn_num$CustServ.Calls
zscalebind = cbind(churn_Zscale, churn_cat)
remove(churn_minmax)
remove(churn_Zscale)
library(corrplot)
corrplot(churn_num)
corrplot(cor(churn_num))
corrplot(cor(churn_num), type = 'number')
?corrplot
corrplot(cor(churn_num), method = 'number')
chisq.test(Churn3.Categoric$Churn,Churn3.Categoric$Intl.Plan)
chisq.test(churn_cat$Churn,churn_cat$Intl.Plan)
chisq.test(churn_cat$Churn,churn_cat$VMail.Plan)
chisq.test(churn_cat$Intl.Plan,churn_cat$VMail.Plan)
# For numeric and Categoric - done by ANOVA
p1 = aov(minmaxBind$Account.Length ~ minmaxBind$Churn)
p1
summary(p1)
# For numeric and Categoric - done by ANOVA
p1 = aov(minmaxBind$Account.Length ~ minmaxBind$Churn)
p2 = aov(minmaxBind$Account.Length ~ minmaxBind$VMail.Plan)
p3 = aov(minmaxBind$VMail.Message ~ minmaxBind$VMail.Plan)
summary(aov(minmaxBind$Intl.Charge ~ minmaxBind$Intl.Plan))
summary(p1)
# Removing the columns:
minmaxBind$Day.Charge=NULL
minmaxBind$Eve.Charge=NULL
minmaxBind$Night.Charge=NULL
minmaxBind$Intl.Charge=NULL
minmaxBind$Churn=NULL
minmaxBind$VMail.Message=NULL
minmaxBind$Phone=NULL
minmaxBind$Area.Code=NULL
minmaxBind$State=NULL
View(minmaxBind)
View(minmaxBind)
## generating train and test data for the linear regression model
## Random sampling
set.seed(143)
trainrows = sample( nrow(minmaxBind), nrow(minmaxBind)*0.8)
trainData = minmaxBind[trainrows,]
testData = minmaxBind[-trainrows,]
## stratified sampling
install.packages("caTools")
lin_model=lm(CustServ.Calls~.,data = trainData)
summary(lin_model)
testData$pred = predict(lin_model, newdata=testData)
View(testData)
# RMSE for the predicted values
rmse = rmse(testData$CustServ.Calls, testData$pred)
rmse
library(caTools)
train_rows=sample.split(minmaxBind$CustServ.Calls,SplitRatio = 0.8)
remove(train_rows)
library(caTools)
trainrows=sample.split(minmaxBind$CustServ.Calls,SplitRatio = 0.8)
trainData=minmaxBind[train_rows,]
testData=minmaxBind[!train_rows,]
lin_model=lm(CustServ.Calls~.,data = trainData)
summary(lin_model)
testData$pred = predict(lin_model, newdata=testData)
# RMSE for the predicted values
rmse = rmse(testData$CustServ.Calls, testData$pred)
rmse <- function(act, pred){
return(sqrt(mean((act-pred)**2)))
}
trainrows=sample.split(minmaxBind$CustServ.Calls,SplitRatio = 0.8)
trainData=minmaxBind[train_rows,]
testData=minmaxBind[!train_rows,]
library(caTools)
trainrows=sample.split(minmaxBind$CustServ.Calls,SplitRatio = 0.8)
trainData=minmaxBind[trainrows,]
testData=minmaxBind[!trainrows,]
lin_model=lm(CustServ.Calls~.,data = trainData)
summary(lin_model)
testData$pred = predict(lin_model, newdata=testData)
# RMSE for the predicted values
rmse = rmse(testData$CustServ.Calls, testData$pred)
rmse
# Removing the columns:
zscalebind$Day.Charge=NULL
zscalebind$Eve.Charge=NULL
zscalebind$Night.Charge=NULL
zscalebind$Intl.Charge=NULL
zscalebind$Churn=NULL
zscalebind$VMail.Message=NULL
zscalebind$Phone=NULL
zscalebind$Area.Code=NULL
zscalebind$State=NULL
## generating train and test data for the linear regression model
## Random sampling
set.seed(143)
trainrows = sample( nrow(zscalebind), nrow(zscalebind)*0.8)
trainData = zscalebind[trainrows,]
testData = zscalebind[-trainrows,]
lin_model=lm(CustServ.Calls~.,data = trainData)
summary(lin_model)
testData$pred = predict(lin_model, newdata=testData)
# RMSE for the predicted values
rmse = rmse(testData$CustServ.Calls, testData$pred)
rmse <- function(act, pred){
return(sqrt(mean((act-pred)**2)))
}
# RMSE for the predicted values
rmse_value = rmse(testData$CustServ.Calls, testData$pred)
rmse_value
## stratified sampling
#install.packages("caTools")
library(caTools)
trainrows=sample.split(zscalebind$CustServ.Calls,SplitRatio = 0.8)
trainData=zscalebind[trainrows,]
testData=zscalebind[!trainrows,]
lin_model=lm(CustServ.Calls~.,data = trainData)
summary(lin_model)
testData$pred = predict(lin_model, newdata=testData)
# RMSE for the predicted values
rmse_value = rmse(testData$CustServ.Calls, testData$pred)
rmse_value
## generating train and test data for the linear regression model
## Random sampling
set.seed(143)
trainrows = sample( nrow(zscalebind), nrow(zscalebind)*0.8)
trainData = zscalebind[trainrows,]
testData = zscalebind[-trainrows,]
lin_model=lm(CustServ.Calls~.,data = trainData)
summary(lin_model)
testData$pred = predict(lin_model, newdata=testData)
# RMSE for the predicted values
rmse_value = rmse(testData$CustServ.Calls, testData$pred)
rmse_value
# Load the Dataset
churn_mv = read.csv("Churn_MV.csv")
# Functions Used
toFactor <- function(x){
x = as.factor(x)
}
rmse <- function(act, pred){
return(sqrt(mean((act-pred)**2)))
}
minmaxscale = function(x){
return((x-min(x))/(max(x)-min(x)))
}
Removeoutliers = function(x){
q3=quantile(x, 0.75)
q1=quantile(x, 0.25)
range= 1.5*IQR(x)
upperbound=q3+range
lowerBound=q1-range
x=ifelse((x>upperbound),upperbound,ifelse((x<lowerBound),lowerBound,x))
return(x)
}
names = colnames(churn_mv)
charCols=c("Churn","Intl.Plan","VMail.Plan","State","Area.Code","Phone")
numCols=setdiff(names,charCols)
numCols
str(churn_mv)
churn_mv[,charCols] = lapply(churn_mv[,charCols], toFactor)
str(churn_mv)
#The records are unnecessary for prediction if Target variable has NA's
churn_mv = churn_mv[!is.na(churn_mv$CustServ.Calls),]
summary(churn_mv)
#Daily.Charges.MV and Day.Charge are same. But Daily.Charges.MV holds some NA's for our practice
churn_mv$Daily.Charges.MV.Mean = ifelse(is.na(churn_mv$Daily.Charges.MV),mean(churn_mv$Day.Charge),churn_mv$Daily.Charges.MV)
churn_mv$Daily.Charges.MV.Median = ifelse(is.na(churn_mv$Daily.Charges.MV),median(churn_mv$Day.Charge),churn_mv$Daily.Charges.MV)
rmseMean = rmse(churn_mv$Day.Charge, churn_mv$Daily.Charges.MV.Mean)
rmseMedian = rmse(churn_mv$Day.Charge, churn_mv$Daily.Charges.MV.Median)
#dropping two cols and median one as well
churn_mv$Day.Charge = NULL
churn_mv$Daily.Charges.MV = NULL
churn_mv$Daily.Charges.MV.Median = NULL
######  Outlier Treatment ######
boxplot(churn_mv)
#Since Columns has got updated, Let us refresh once
names = colnames(churn_mv)
charCols=c("Churn","Intl.Plan","VMail.Plan","State","Area.Code","Phone")
numCols=setdiff(names,charCols)
churn_mv[,numCols]=lapply(churn_mv[,numCols], Removeoutliers)
churn_num = churn_mv[,numCols]
churn_cat = churn_mv[,charCols]
# Min Max Scaling
# Scale the data by excluding Target Variable
churn_minmax = as.data.frame(lapply(churn_num[,-7], minmaxscale))
churn_minmax$CustServ.Calls = churn_num$CustServ.Calls
minmaxBind = cbind(churn_minmax, churn_cat)
# Z Scaling
churn_Zscale = as.data.frame(scale(churn_num[,-7]))
churn_Zscale$CustServ.Calls = churn_num$CustServ.Calls
zscalebind = cbind(churn_Zscale, churn_cat)
remove(churn_minmax)
remove(churn_Zscale)
View(minmaxBind)
View(minmaxBind)
View(zscalebind)
View(zscalebind)
View(zscalebind)
corrplot(cor(churn_num), method = 'number')
chisq.test(churn_cat$Churn,churn_cat$Intl.Plan) # p <= 0.05
chisq.test(churn_cat$Churn,churn_cat$VMail.Plan) # p <= 0.05
chisq.test(churn_cat$Intl.Plan,churn_cat$VMail.Plan) # p > 0.05, both are independent
# For numeric and Categoric - done by ANOVA
p1 = aov(minmaxBind$Account.Length ~ minmaxBind$Churn)
p2 = aov(minmaxBind$Account.Length ~ minmaxBind$VMail.Plan)
p3 = aov(minmaxBind$VMail.Message ~ minmaxBind$VMail.Plan)
summary(aov(minmaxBind$Intl.Charge ~ minmaxBind$Intl.Plan))
summary(p1)
remove(p1)
remove(p2)
remove(p3)
# Removing the columns:
minmaxBind$Day.Charge=NULL
minmaxBind$Eve.Charge=NULL
minmaxBind$Night.Charge=NULL
minmaxBind$Intl.Charge=NULL
minmaxBind$Churn=NULL
minmaxBind$VMail.Message=NULL
minmaxBind$Phone=NULL
minmaxBind$Area.Code=NULL
minmaxBind$State=NULL
## generating train and test data for the linear regression model
## Random sampling
set.seed(143)
trainrows = sample( nrow(minmaxBind), nrow(minmaxBind)*0.8)
trainData = minmaxBind[trainrows,]
testData = minmaxBind[-trainrows,]
lin_model=lm(CustServ.Calls~.,data = trainData)
summary(lin_model)
testData$pred = predict(lin_model, newdata=testData)
# RMSE for the predicted values
rmse_value = rmse(testData$CustServ.Calls, testData$pred)
rmse_value
## stratified sampling
#install.packages("caTools")
library(caTools)
trainrows=sample.split(minmaxBind$CustServ.Calls,SplitRatio = 0.8)
trainData=minmaxBind[trainrows,]
testData=minmaxBind[!trainrows,]
lin_model=lm(CustServ.Calls~.,data = trainData)
summary(lin_model)
testData$pred = predict(lin_model, newdata=testData)
# RMSE for the predicted values
rmse_value = rmse(testData$CustServ.Calls, testData$pred)
rmse_value
# Removing the columns:
zscalebind$Day.Charge=NULL
zscalebind$Eve.Charge=NULL
zscalebind$Night.Charge=NULL
zscalebind$Intl.Charge=NULL
zscalebind$Churn=NULL
zscalebind$VMail.Message=NULL
zscalebind$Phone=NULL
zscalebind$Area.Code=NULL
zscalebind$State=NULL
## generating train and test data for the linear regression model
## Random sampling
set.seed(143)
## generating train and test data for the linear regression model
## Random sampling
set.seed(123)
trainrows = sample( nrow(zscalebind), nrow(zscalebind)*0.8)
trainData = zscalebind[trainrows,]
testData = zscalebind[-trainrows,]
lin_model=lm(CustServ.Calls~.,data = trainData)
summary(lin_model)
testData$pred = predict(lin_model, newdata=testData)
# RMSE for the predicted values
rmse_value = rmse(testData$CustServ.Calls, testData$pred)
rmse_value
## generating train and test data for the linear regression model
## Random sampling
set.seed(153)
trainrows = sample( nrow(zscalebind), nrow(zscalebind)*0.8)
trainData = zscalebind[trainrows,]
testData = zscalebind[-trainrows,]
lin_model=lm(CustServ.Calls~.,data = trainData)
summary(lin_model)
testData$pred = predict(lin_model, newdata=testData)
# RMSE for the predicted values
rmse_value = rmse(testData$CustServ.Calls, testData$pred)
rmse_value
## generating train and test data for the linear regression model
## Random sampling
set.seed(153)
trainrows=sample.split(zscalebind$CustServ.Calls,SplitRatio = 0.8)
trainData=zscalebind[trainrows,]
testData=zscalebind[!trainrows,]
lin_model=lm(CustServ.Calls~.,data = trainData)
summary(lin_model)
testData$pred = predict(lin_model, newdata=testData)
# RMSE for the predicted values
rmse_value = rmse(testData$CustServ.Calls, testData$pred)
rmse_value
remove(trainData)
remove(testData)
remove(lin_model)
View(minmaxBind)
View(minmaxBind)
View(churn_mv)
View(churn_mv)
churn_mv2 = read.csv("Churn_MV.csv")
churn_mv2 = read.csv("Churn_MV.csv")
names = colnames(churn_mv2)
charCols=c("Churn","Intl.Plan","VMail.Plan","State","Area.Code","Phone")
numCols=setdiff(names,charCols)
numCols
str(churn_mv)
str(churn_mv2)
churn_mv2[,charCols] = lapply(churn_mv2[,charCols], toFactor)
str(churn_mv2)
churn_mv2 = churn_mv2[-seq(1,nrow(churn_mv2),by = 2),]
View(churn_mv2)
View(churn_mv2)
summary(churn_mv2)
######  Outlier Treatment ######
boxplot(churn_mv2)
# Columns might have got updated, Let us refresh once
names = colnames(churn_mv2)
charCols=c("Churn","Intl.Plan","VMail.Plan","State","Area.Code","Phone")
numCols=setdiff(names,charCols)
churn_mv2[,numCols]=lapply(churn_mv2[,numCols], Removeoutliers)
churn_mv2[,numCols]=lapply(churn_mv2[,numCols], Removeoutliers)
Removeoutliers = function(x){
q3=quantile(x, 0.75, na.rm = TRUE)
q1=quantile(x, 0.25, na.rm = TRUE)
range= 1.5*IQR(x)
upperbound=q3+range
lowerBound=q1-range
x=ifelse((x>upperbound),upperbound,ifelse((x<lowerBound),lowerBound,x))
return(x)
}
churn_mv2[,numCols]=lapply(churn_mv2[,numCols], Removeoutliers)
Removeoutliers = function(x){
q3=quantile(x, 0.75, na.rm = TRUE)
q1=quantile(x, 0.25, na.rm = TRUE)
range= 1.5*IQR(x, na.rm = TRUE)
upperbound=q3+range
lowerBound=q1-range
x=ifelse((x>upperbound),upperbound,ifelse((x<lowerBound),lowerBound,x))
return(x)
}
churn_mv2[,numCols]=lapply(churn_mv2[,numCols], Removeoutliers)
summary(churn_mv2)
churn_num2 = churn_mv2[,numCols]
churn_cat2 = churn_mv2[,charCols]
names(churn_num2)
names(churn_num2)
churn_Zscale2 = as.data.frame(scale(churn_num2[,-10]))
churn_Zscale2$Daily.Charges.MV = churn_num2$Daily.Charges.MV
zscalebind2 = cbind(churn_Zscale2, churn_cat2)
summary(zscalebind2)
remove(churn_Zscale2)
corrplot(cor(churn_num2), method = 'number')
View(zscalebind2)
View(zscalebind2)
zscalebind2$Day.Charge=NULL
zscalebind2$Eve.Charge=NULL
zscalebind2$Night.Charge=NULL
zscalebind2$Intl.Charge=NULL
zscalebind2$Churn=NULL
zscalebind2$VMail.Message=NULL
zscalebind2$Phone=NULL
zscalebind2$Area.Code=NULL
zscalebind2$State=NULL
## Random sampling
set.seed(200)
traindata = zscalebind2[!is.na(zscalebind2$Daily.Charges.MV),]
summary(trainData)
summary(traindata)
testdata = zscalebind2[is.na(zscalebind2$Daily.Charges.MV),]
summary(testdata)
View(testdata)
lin_model=lm(Daily.Charges.MV~.,data = traindata)
summary(lin_model)
#testing
testdata$Daily.Charges.MV = predict(lin_model, newdata=testdata)
View(testdata)
finalchurn = rbind(traindata,testdata)
View(finalchurn)
summary(finalchurn)
View(churn_mv2)
rmsefinal = rmse(churn_mv2$Day.Charge, finalchurn$Daily.Charges.MV)
rmsefinal
save.image("D:/Learnings/DataScience/ML/Other Sources/CapStone1Data.RData")
setwd("D:/Learnings/DataScience/ML/Unsupervised/Clustering/Practice")
ecomdata = read.csv("EcommerceData.csv")
View(ecomdata)
str(ecomdata)
nrow(ecomdata$InvoiceNo)
nrow(ecomdata)
length(ecomdata$InvoiceNo)
length(unique(ecomdata$InvoiceNo))
?grepl
length(unique(grepl('c',ecomdata$InvoiceNo)))
unique(grepl('c',ecomdata$InvoiceNo))
ecomdata[grepl('c',ecomdata$InvoiceNo),]
ecomdata[grepl('C',ecomdata$InvoiceNo),]
nrow(ecomdata[grepl('C',ecomdata$InvoiceNo),])
sum(is.na(ecomdata$CustomerID))
ecomdata = ecomdata[!is.na(ecomdata$CustomerID), ]
x = as.data.frame(c(1,1,2,3,2),c('A','B','C','D','C'))
View(x)
id = c(1,1,2,3,2)
name = c('A','B','C','D','C')
x = data.frame(id,name)
library(dplyr)
x = distinct(x)
#Remove duplicates
ecomdata = distinct(ecomdata)
ecomdata[ecomdata$CustomerID == 12583, ]
nrow(ecomdata[ecomdata$CustomerID == 12583, ])
nrow(ecomdata[ecomdata$CustomerID == 12583 & '12/1/2010' %in% ecomdata$InvoiceDate, ])
nrow(ecomdata[ecomdata$CustomerID == 12583 & '12/1/2010 8:45' %in% ecomdata$InvoiceDate, ])
nrow(ecomdata[ecomdata$CustomerID == 12583 & '%12/1/2010%' %in% ecomdata$InvoiceDate, ])
nrow(ecomdata[ecomdata$CustomerID == 12583 & '12/1/2010 8:45' %in% ecomdata$InvoiceDate, ])
ecomdata[ecomdata$CustomerID == 12583 & '12/1/2010 8:45' %in% ecomdata$InvoiceDate, ]
nrow(ecomdata[ecomdata$CustomerID == 12583 , ])
nrow(ecomdata[ecomdata$CustomerID == 12583 && '12/1/2010 8:45' %in% ecomdata$InvoiceDate, ])
nrow(ecomdata[ecomdata$CustomerID == 12583 && ecomdata$InvoiceDate %in% '12/1/2010 8:45', ])
