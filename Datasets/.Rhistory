str_view(x, "\$\^\$")
str_view(x, "$\^$")
str_view(x, "^$^$$")
str_view(x, "^\$^\$$")
str_view(x, "\^$^$$")
#How would you match the literal string "$^$"?
x <- c("$^$","^$^$$")
str_view(x, "^$^$$")
str_view(x, "^^$^$$$")
str_view(x, "^\\$\\^\\$$")
str_view(x, "^\$\^\$$")
it searches for escape sequences in STRINGS, but \\ is something
# we use as escape in REGEX
# if we try with single \, it searches for escape sequences in STRINGS, but \\ is something
# if we try with single \, it searches for escape sequences in STRINGS, but \\ is something
# we use as escape in REGEX
# if we try with single \, it searches for escape sequences in STRINGS, but \\ is something
# we use as escape in REGEX
# if we try with single \, it searches for escape sequences in STRINGS, but \\ is something
# we use as escape in REGEX
# if we try with single \, it searches for escape sequences in STRINGS, but \\ is something
# we use as escape in REGEX
str_view(x, "^\$\^\$$")
str_view(x, "^\\$\\^\\$$") # Perfect !
stringr::words
x = stringr::words
#1 Start with “y”.
str_view(x,"^y")
#1 Start with “y”.
str_match(x,"^y")
#1 Start with “y”.
str_extract(x,"^y")
x
#1 Start with “y”.
str_subset(x,"^y")
#2 End with “x”
str_subset(x,"$x")
#2 End with “x”
str_subset(x,"x$")
#3 Are exactly three letters long.
str_view(x,"^...$")
#3 Are exactly three letters long.
str_view(x,"...")
#3 Are exactly three letters long.
str_view(x,"^...")
#3 Are exactly three letters long.
str_view(x,"^...$")
#3 Are exactly three letters long.
str_subset(x,"^...$")
#4 Have seven letters or more.
str_subset(x, "^.......")
#4 Have seven letters or more.
str_subset(x, "^..........")
#4 Have seven letters or more.
str_subset(x, "^...........")
#4 Have seven letters or more.
str_subset(x, "^............")
#4 Have seven letters or more.
str_subset(x, "^.......")
min(str_length(str_subset(x,"^.......")))
min(str_length(str_subset(x,"^........")))
str_view(c("abc", "a.c", "a*c", "a c"), "a[.]c")
str_view(c("abc", "a.c", "a*c", "a c"), ".[*]c")
str_view(c("abc", "a.c", "a*c", "a c"), "a[ ]")
str_view(c("abc", "a.c", "a*c", "a c"), "a[ ]")
str_view(c("abc", "a.c", "a*c", "a(c"), "a[(]c")
str_view(c("abc", "a.c", "a*c", "a c"), "abc|d..f")
str_view(c("abc", "d..f", "a*c", "a c"), "abc|d..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf"), "abc|d..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d..."), "abc|d..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d..."), "abc|d..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d..."), "ab(c|d)..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abcegf"), "ab(c|d)..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abc..f"), "ab(c|d)..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abc..f","abcd..f"), "ab(c|d)..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abc..f","abd..f"), "ab(c|d)..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abc..f","abd..f","ab...f"), "ab(c|d)..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abc..f","abd..f","ab...f","abcdef"), "ab(c|d)..f")
#Excercise
#1 Start with a vowel.
str_subset(x,"^aeiou")
#Excercise
#1 Start with a vowel.
str_subset(x,"^[aeiou]")
str_view(c("abc", "a.c", "a*c", "a(c"), "a[(*]c")
#2 That only contain consonants.
str_subset(x,"[^aeiou]")
#2 That only contain consonants.
str_subset(x,"[^(aeiou)]")
#2 That only contain consonants.
str_subset(x,"[^aeiou]")
#2 That only contain consonants.
str_subset(x,"[aeiou]")
#Excercise
#1 Start with a vowel.
length(str_subset(x,"^[aeiou]"))
#Excercise
#1 Start with a vowel.
str_subset(x,"^[aeiou]")
length(str_subset(x,"^[aeiou]"))
#Excercise
#1 Start with a vowel.
str_subset(x,"^[aeiou]")
#2 That only contain consonants.
str_subset(x,".[^aeiou].")
#2 That only contain consonants.
str_subset(x,"[aeiou]")
length(str_subset(x,"[aeiou]"))
str_match(x,"[aeiou]")
x[952]
str_match(x,"^[aeiou]")
str_match(x,"[^aeiou]")
length(str_subset(x,"[^aeiou]"))
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abc..f","abd..f","ab...f","abcdef"), "ab(c|d)..f")
#2 That only contain consonants.
str_subset(x,"[^aeiou]")
str_match(x,"^[^aeiou]")
#2 That only contain consonants.
str_subset(x,"^[^aeiou]")
#2 That only contain consonants.
str_subset(x,"^[^aeiou]+$")
#3 End with ed, but not with eed.
str_sub(x,".[^e]ed$")
#3 End with ed, but not with eed.
str_sub(x,".[e]ed$")
#3 End with ed, but not with eed.
str_subset(x,".[^e]ed$")
#3 End with ed, but not with eed.
str_subset(x,".[e]ed$")
#4 End with ing or ise.
str_subset(x, ".(ing|ise)$")
#5 Create a regular expression that will match telephone numbers as commonly written in your country.
phones = c("+91 8099880974","8088776654")
str_subset(phones,"^[+91]\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$")
str_subset(phones,"^[+91]\\d\\d\\d\\d\\d\\d\\d\\d\\d$")
str_subset(phones,"^[+91]\\d$")
str_subset(phones,"^[+91]+[]+[\d{10}]$")
str_subset(phones,"^[+91]+[]+[\\d{10}]$")
str_subset(phones,"^[+91]+[ ]+[\\d{10}]$")
str_subset(phones,"^[\\d{10}]$")
str_subset(phones,"[\\d{10}]")
str_subset(phones,"[\\d{11}]")
str_subset(phones,"[\\d{8}]")
str_subset(phones,"[\\d{8}]$")
str_subset(phones,"[\\d{1}]$")
str_subset(phones,"^[+91]+[ ]+\\d{10}$")
str_subset(phones,"\\d{1}$")
str_subset(phones,"\\d{12}$")
str_subset(phones,"\\d{10}$")
str_subset(phones,"^\\d{10}$")
str_subset(phones,"^[+91][ ]+\\d{10}$")
str_subset(phones,"^[+91]+[ ]+\\d{10}$")
str_subset(phones,"^\\d{10}$")
setwd("D:/Learnings/DataScience/ML/Datasets")
# Titanic Data Set
#survived -> Target
mydata = read.csv('titanic.csv')
names(mydata)
colsToUse = c('pclass','survived','sex','age','fare',
'sibsp','parch','embarked')
mydata = mydata[,colsToUse]
###
# install.packages('DMwR')
library(DMwR)
mydata = knnImputation(data = mydata,k=5)
summary(mydata)
sum(is.na(mydata))
summary(mydata)
# data2$pclass = as.factor(data2$pclass)
mydata$sex = as.factor(mydata$sex)
mydata$survived = as.factor(mydata$survived)
summary(mydata)
str(mydata)
names(mydata)
summary(mydata)
#### train test split
mydata$survived = as.factor(mydata$survived)
set.seed(123)
rows = 1:nrow(mydata)
trainRows = sample(rows,round(0.7*nrow(mydata)))
trainData = mydata[trainRows,]
testData = mydata[-trainRows,]
prop.table(table(trainData$survived))
prop.table(table(testData$survived))
####### Random Forest
#install.packages('randomForest')
library(randomForest)
(
rfmod = randomForest(survived~.,
data = trainData,
ntree=150,
mtry=4,
nodesize=5,maxnodes=10,
classwt=c(1,1.5),
strata = trainData$survived)
rfmod = randomForest(survived~.,
data = trainData,
ntree=150,
mtry=4,
nodesize=5,maxnodes=10,
classwt=c(1,1.5),
strata = trainData$survived)
rfmod = randomForest(survived~.,
data = trainData,
ntree=150,
mtry=4,
nodesize=5,maxnodes=10,
classwt=c(1,1.5),
strata = trainData$survived)
rfmod
preds = predict(rfmod,trainData,type='response')
x = table(trainData$survived, preds,dnn=c('acts','preds'))
x
preds
#F1 Score
recall_train = x[2,2]/(x[2,1]+x[2,2])
precision_train = x[2,2]/(x[1,2]+x[2,2])
recall_train
precision_train
F1_bagtrain = 2*recall_train*precision_train/(recall_train+precision_train)
F1_bagtrain
preds = predict(rfmod,testData,type='response')
table(testData$survived, preds,dnn=c('acts','preds'))
#F1 Score
recall_test = x[2,2]/(x[2,1]+x[2,2])
precision_test = x[2,2]/(x[1,2]+x[2,2])
recall_test
precision_test
F1_bagtest = 2*recall_test*precision_test/(recall_test+precision_test)
F1_bagtest
preds = predict(rfmod,testData,type='response')
table(testData$survived, preds,dnn=c('acts','preds'))
#F1 Score
recall_test = x[2,2]/(x[2,1]+x[2,2])
precision_test = x[2,2]/(x[1,2]+x[2,2])
recall_test
precision_test
F1_bagtest = 2*recall_test*precision_test/(recall_test+precision_test)
F1_bagtest
preds = predict(rfmod,testData,type='response')
x = table(testData$survived, preds,dnn=c('acts','preds'))
#F1 Score
recall_test = x[2,2]/(x[2,1]+x[2,2])
precision_test = x[2,2]/(x[1,2]+x[2,2])
recall_test
precision_test
F1_bagtest = 2*recall_test*precision_test/(recall_test+precision_test)
F1_bagtest
rfmod = randomForest(survived~.,
data = trainData,
ntree=200,
mtry=4,
nodesize=5,maxnodes=10,
classwt=c(1,1.5),
strata = trainData$survived)
preds = predict(rfmod,trainData,type='response')
x = table(trainData$survived, preds,dnn=c('acts','preds'))
x
#F1 Score
recall_train = x[2,2]/(x[2,1]+x[2,2])
precision_train = x[2,2]/(x[1,2]+x[2,2])
recall_train
precision_train
F1_bagtrain = 2*recall_train*precision_train/(recall_train+precision_train)
F1_bagtrain
preds = predict(rfmod,testData,type='response')
x = table(testData$survived, preds,dnn=c('acts','preds'))
#F1 Score
recall_test = x[2,2]/(x[2,1]+x[2,2])
precision_test = x[2,2]/(x[1,2]+x[2,2])
recall_test
precision_test
F1_bagtest = 2*recall_test*precision_test/(recall_test+precision_test)
F1_bagtest
rfmod = randomForest(survived~.,
data = trainData,
ntree=130,
mtry=4,
nodesize=5,maxnodes=10,
classwt=c(1,1.5),
strata = trainData$survived)
preds = predict(rfmod,trainData,type='response')
x = table(trainData$survived, preds,dnn=c('acts','preds'))
x
#F1 Score
recall_train = x[2,2]/(x[2,1]+x[2,2])
precision_train = x[2,2]/(x[1,2]+x[2,2])
recall_train
precision_train
F1_bagtrain = 2*recall_train*precision_train/(recall_train+precision_train)
F1_bagtrain
rfmod = randomForest(survived~.,
data = trainData,
ntree=130,
mtry=6,
nodesize=5,maxnodes=10,
classwt=c(1,1.5),
strata = trainData$survived)
preds = predict(rfmod,trainData,type='response')
x = table(trainData$survived, preds,dnn=c('acts','preds'))
x
#F1 Score
recall_train = x[2,2]/(x[2,1]+x[2,2])
precision_train = x[2,2]/(x[1,2]+x[2,2])
recall_train
precision_train
F1_bagtrain = 2*recall_train*precision_train/(recall_train+precision_train)
F1_bagtrain
rfmod = randomForest(survived~.,
data = trainData,
ntree=130,
mtry=4,
nodesize=5,maxnodes=10,
classwt=c(1,1.5),
strata = trainData$survived)
rfmod = randomForest(survived~.,
data = trainData,
ntree=130,
mtry=8,
nodesize=5,maxnodes=10,
classwt=c(1,1.5),
strata = trainData$survived)
rfmod = randomForest(survived~.,
data = trainData,
ntree=130,
mtry=7,
nodesize=5,maxnodes=10,
classwt=c(1,1.5),
strata = trainData$survived)
preds = predict(rfmod,trainData,type='response')
x = table(trainData$survived, preds,dnn=c('acts','preds'))
x
#F1 Score
recall_train = x[2,2]/(x[2,1]+x[2,2])
precision_train = x[2,2]/(x[1,2]+x[2,2])
recall_train
precision_train
F1_bagtrain = 2*recall_train*precision_train/(recall_train+precision_train)
F1_bagtrain
rfmod = randomForest(survived~.,
data = trainData,
ntree=130,
mtry=4,
nodesize=5,maxnodes=10,
classwt=c(1,1.5),
strata = trainData$survived)
preds = predict(rfmod,trainData,type='response')
x = table(trainData$survived, preds,dnn=c('acts','preds'))
x
#F1 Score
recall_train = x[2,2]/(x[2,1]+x[2,2])
precision_train = x[2,2]/(x[1,2]+x[2,2])
recall_train
precision_train
F1_bagtrain = 2*recall_train*precision_train/(recall_train+precision_train)
F1_bagtrain
preds = predict(rfmod,testData,type='response')
x = table(testData$survived, preds,dnn=c('acts','preds'))
#F1 Score
recall_test = x[2,2]/(x[2,1]+x[2,2])
precision_test = x[2,2]/(x[1,2]+x[2,2])
recall_test
precision_test
F1_bagtest = 2*recall_test*precision_test/(recall_test+precision_test)
F1_bagtest
rfmod = randomForest(survived~.,
data = trainData,
ntree=150,
mtry=4,
nodesize=5,maxnodes=10,
classwt=c(1,1.5),
strata = trainData$survived)
preds = predict(rfmod,trainData,type='response')
x = table(trainData$survived, preds,dnn=c('acts','preds'))
x
#F1 Score
recall_train = x[2,2]/(x[2,1]+x[2,2])
precision_train = x[2,2]/(x[1,2]+x[2,2])
recall_train
precision_train
F1_bagtrain = 2*recall_train*precision_train/(recall_train+precision_train)
F1_bagtrain
rfmod = randomForest(survived~.,
data = trainData,
ntree=150,
mtry=3,
nodesize=5,maxnodes=10,
classwt=c(1,1.5),
strata = trainData$survived)
preds = predict(rfmod,trainData,type='response')
x = table(trainData$survived, preds,dnn=c('acts','preds'))
x
#F1 Score
recall_train = x[2,2]/(x[2,1]+x[2,2])
precision_train = x[2,2]/(x[1,2]+x[2,2])
recall_train
precision_train
F1_bagtrain = 2*recall_train*precision_train/(recall_train+precision_train)
F1_bagtrain
preds = predict(rfmod,testData,type='response')
x = table(testData$survived, preds,dnn=c('acts','preds'))
#F1 Score
recall_test = x[2,2]/(x[2,1]+x[2,2])
precision_test = x[2,2]/(x[1,2]+x[2,2])
recall_test
precision_test
F1_bagtest = 2*recall_test*precision_test/(recall_test+precision_test)
F1_bagtest
rfmod = randomForest(survived~.,
data = trainData,
ntree=150,
mtry=3,
nodesize=10,maxnodes=20,
classwt=c(1,1.5),
strata = trainData$survived)
preds = predict(rfmod,trainData,type='response')
x = table(trainData$survived, preds,dnn=c('acts','preds'))
x
#F1 Score
recall_train = x[2,2]/(x[2,1]+x[2,2])
precision_train = x[2,2]/(x[1,2]+x[2,2])
recall_train
precision_train
F1_bagtrain = 2*recall_train*precision_train/(recall_train+precision_train)
F1_bagtrain
preds = predict(rfmod,testData,type='response')
x = table(testData$survived, preds,dnn=c('acts','preds'))
#F1 Score
recall_test = x[2,2]/(x[2,1]+x[2,2])
precision_test = x[2,2]/(x[1,2]+x[2,2])
recall_test
precision_test
F1_bagtest = 2*recall_test*precision_test/(recall_test+precision_test)
F1_bagtest
rfmod = randomForest(survived~.,
data = trainData,
ntree=150,
mtry=3,
nodesize=10,maxnodes=20,
classwt=c(1,4.5),
strata = trainData$survived)
preds = predict(rfmod,trainData,type='response')
x = table(trainData$survived, preds,dnn=c('acts','preds'))
x
#F1 Score
recall_train = x[2,2]/(x[2,1]+x[2,2])
precision_train = x[2,2]/(x[1,2]+x[2,2])
recall_train
precision_train
F1_bagtrain = 2*recall_train*precision_train/(recall_train+precision_train)
F1_bagtrain
preds = predict(rfmod,testData,type='response')
x = table(testData$survived, preds,dnn=c('acts','preds'))
#F1 Score
recall_test = x[2,2]/(x[2,1]+x[2,2])
precision_test = x[2,2]/(x[1,2]+x[2,2])
recall_test
precision_test
F1_bagtest = 2*recall_test*precision_test/(recall_test+precision_test)
F1_bagtest
rfmod = randomForest(survived~.,
data = trainData,
ntree=150,
mtry=3,
nodesize=10,maxnodes=20,
classwt=c(1,100),
strata = trainData$survived)
preds = predict(rfmod,trainData,type='response')
x = table(trainData$survived, preds,dnn=c('acts','preds'))
x
#F1 Score
recall_train = x[2,2]/(x[2,1]+x[2,2])
precision_train = x[2,2]/(x[1,2]+x[2,2])
recall_train
precision_train
F1_bagtrain = 2*recall_train*precision_train/(recall_train+precision_train)
F1_bagtrain
preds = predict(rfmod,testData,type='response')
x = table(testData$survived, preds,dnn=c('acts','preds'))
#F1 Score
recall_test = x[2,2]/(x[2,1]+x[2,2])
precision_test = x[2,2]/(x[1,2]+x[2,2])
recall_test
precision_test
F1_bagtest = 2*recall_test*precision_test/(recall_test+precision_test)
F1_bagtest
for(i in 100: 200)
{
i= i+10
rfmod = randomForest(survived~.,
data = trainData,
ntree=i,
mtry=5,
nodesize=10,maxnodes=20,
classwt=c(1,1.3),
strata = trainData$survived)
preds = predict(rfmod,trainData,type='response')
x = table(trainData$survived, preds,dnn=c('acts','preds'))
x
#F1 Score
recall_train = x[2,2]/(x[2,1]+x[2,2])
precision_train = x[2,2]/(x[1,2]+x[2,2])
F1_bagtrain = 2*recall_train*precision_train/(recall_train+precision_train)
recall_train
precision_train
F1_bagtrain
}
##### Adaboost
library(adabag)
#control =c(minsplit =20,maxdepth=4,cp=0.01,minbucket=20))
?boosting
?rpart
