for(i in 1:nrow(y)){
z1 = c(z1, paste(y[i,1], y[i,2]))
z2 = c(y[i,3])
}
z1
z2
z2 = c(z2, y[i,3])
z2
y = str_split(employee_skills," ",simplify = T)
y
z1 = c()
z2 = c()
for(i in 1:nrow(y)){
z1 = c(z1, paste(y[i,1], y[i,2]))
z2 = c(z2, y[i,3])
}
z1
z2
?str_remove()
?str_remove
?str_match()
str_match(z2,"()")
str_match(z2,"(")
gsub(.,'',z2)
gsub('.','',z2)
sub('.','',z2)
gsub('.','',z2)
sub('.$','',z2)
z2
z2 = sub('.','',sub('.$','',z2))
z2
z1
z2
df = data.frame(z1,z2)
df
df[x,]
df = df[x,]
df
as.matrix(df)
df1 = df[x,]
df1
#9
employee_skills
e
e
addresses <- c("14 Pine Street, Los Angeles", "152 Redwood Street, Seattle", "8 Washington Boulevard, New York")
products <- c("TV", "laptop", "portable charger", "Wireless Keybord", "HeadPhones")
ong_sentences <- stringr::sentences[1:10]
field_names <- c("order_number", "order_date", "customer_email", "product_title", "amount")
employee_skills <- c("John Bale (Beginner)", "Rita Murphy (Pro)","Chris White (Pro)", "Sarah Reid (Medium)")
#9
employee_skills
x = grepl("Pro", employee_skills) | grepl("Medium", employee_skills)
y = str_split(employee_skills," ",simplify = T)
y
z1 = c()
z2 = c()
for(i in 1:nrow(y)){
z1 = c(z1, paste(y[i,1], y[i,2]))
z2 = c(z2, y[i,3])
}
z1
z2
z2 = sub('.','',sub('.$','',z2))
z2
df = data.frame(z1,z2)
df1 = df[x,]
df1
z1
z2
z1 = z1[x,]
z1 = z1[x]
z1
z2 = z2[x]
z2 = sub('.','',sub('.$','',z2))
z2
df = data.frame(z1,z2)
#9
employee_skills
x = grepl("Pro", employee_skills) | grepl("Medium", employee_skills)
y = str_split(employee_skills," ",simplify = T)
y
z1 = c()
z2 = c()
for(i in 1:nrow(y)){
z1 = c(z1, paste(y[i,1], y[i,2]))
z2 = c(z2, y[i,3])
}
z1 = z1[x]
z2 = z2[x]
z2 = sub('.','',sub('.$','',z2))
z2
df = data.frame(z1,z2)
df1 = df[x,]
as.matrix(df)
###########################################################################################
x <- "I AM SAM. I AM SAM. SAM I AM"
y <- "THAT SAM-I-AM! THAT SAM-I-AM! I DO NOT LIKE THAT SAM-I-AM!"
z <- "DO WOULD YOU LIKE GREEN EGGS AND HAM?"
paste(c(x,y,z))
paste(c(x,y,z), collapse = '.')
#1 STringr function to merge x y z
?paste
paste(c(x,y,z),sep = '&', collapse = '.')
paste(c(x,y,z),sep = '&')
paste(c(x,y,z),sep = '.')
paste(c(x,y,z))
paste(x,y,sep = '.')
paste(x,y,z,sep = '.')
paste(c(x,y,z), sep = '.')
paste(c(x,y,z), collapse = '.')
paste(c(x,y),z)
paste(c(x,y),z, sep = '.')
paste(c(x,y),z, collapse = '.')
#2
library(datasets)
data('babynames')
#2
paste(c(x,y,z,NA), collapse = '.')
str_c(c(x,y,z,NA), collapse = '.')
?str_c
str_c(x,y,z)
str_c(x,y,z, sep = ' ')
str_c(x,y,z, sep = '..')
str_c(x,y,z,NA, sep = '..')
data("mtcars")
mtcarsdata = data("mtcars")
library(MASS)
mtcarsdata = data("mtcars")
?MASS
?mtcars
?MASS
mtcarsdata = data("mtcars")
data("mtcars")
###########################################################################################
x <- "I AM SAM. I AM SAM. SAM I AM"
y <- "THAT SAM-I-AM! THAT SAM-I-AM! I DO NOT LIKE THAT SAM-I-AM!"
z <- "DO WOULD YOU LIKE GREEN EGGS AND HAM?"
library(MASS)
data("mtcars")
mydata = mtcars
View(mydata)
rownames(mtcars)
str_count(rownames(mtcars),"Merc")
sum(str_count(rownames(mtcars),"Merc"))
?str_count
?str_subset
str_subset(rownames(mydata),"Merc")
sum(rownames(mtcars),"Merc")
fruit <- c("apple", "banana", "pear", "pinapple")
str_subset(fruit, "a")
#4 Use the same mtcars rownames ,find the total number of times “e” appears in that .
str_subset(mydata,"Merc")
#4 Use the same mtcars rownames ,find the total number of times “e” appears in that .
str_subset(mydata,"e")
#4 Use the same mtcars rownames ,find the total number of times “e” appears in that .
x = c()
for(i in 1:ncol(mydata)){
x = c(x , str_subset(mydata[,i],"e"))
}
x
str_subset(mydata[,1],"e")
str_subset(mydata[1,],"e")
mydata[1,]
#4 Use the same mtcars rownames ,find the total number of times “e” appears in that .
str_subset(rownames(mydata),"e")
#4 Use the same mtcars rownames ,find the total number of times “e” appears in that .
str_count(str_subset(rownames(mydata),"e"))
#4 Use the same mtcars rownames ,find the total number of times “e” appears in that .
str_length(str_subset(rownames(mydata),"e"))
#4 Use the same mtcars rownames ,find the total number of times “e” appears in that .
nrow(str_subset(rownames(mydata),"e"))
#4 Use the same mtcars rownames ,find the total number of times “e” appears in that .
ncol(str_subset(rownames(mydata),"e"))
#4 Use the same mtcars rownames ,find the total number of times “e” appears in that .
(str_subset(rownames(mydata),"e"))
#4 Use the same mtcars rownames ,find the total number of times “e” appears in that .
x = (str_subset(rownames(mydata),"e"))
length(x)
length(str_subset(rownames(mydata),"e"))
str_count(rownames(mydata),"e")
#Example
fruit <- c("apple", "banana", "pear", "pinpple")
str_subset(fruit, "a")
#4 Use the same mtcars rownames ,find the total number of times “e” appears in that .
length(str_subset(rownames(mydata),"e"))
str_count(rownames(mydata),"e")
str_split(j,"_")
#5 Split below sentence
j <- "The_quick_brown_fox_jumps_over_the_lazy_dog"
str_split(j,"_")
j <- "The_quick_brown_fox_jumps_over_the_lazy_dog"
str_split(j,"_")
str_split(j,"_",n=2)
str_split(j,"_",n=3)
str_split(j,"_",n=3,simplify = T)
?str_split
#7 I want the first “_” replaced by “–”  for string j
j <- "The_quick_brown_fox_jumps_over_the_lazy_dog"
?str_replace
str_replace(j,"_","-")
#to replace all occurences
str_replace_all(j,"_","-")
#8
na_string_vec <- c("The_quick_brown_fox_jumps_over_the_lazy_dog",NA)
na_string_vec
str_replace_na(na_string_vec)
grepl("Pro", employee_skills)
employee_skills <- c("John Bale (Beginner)", "Rita Murphy (Pro)","Chris White (Pro)", "Sarah Reid (Medium)")
s = "Sai Teja Singamsetty"
length(s)
str_length(s)
str_sub(s,1)
str_sub(s,-1)
str_sub(s,-1,-7)
str_sub(s,-7,-1)
str_sub(s,-1)
str_sub(s,-5,-1)
str_sub(s,-5)
str_sub(s,1)
library(tidyverse)
library(stringr)
string1 <- "This is a string"
string2 <- 'If I want to include a "quote" inside a string, I use single quotes'
string3 <- 'If I want to include a \'quote\' inside a string, I use single quotes'
string3 <- 'If I want to include a ''\'quote''\' inside a string, I use single quotes'
string3 <- 'If I want to include a 'quote' inside a string, I use single quotes'
writeLines(string3)
#str_length() tells you the number of characters in a string
str_length(c("a", "R for data science", NA))
#To combine two or more strings, use str_c()
str_c(c("a","bcd","efgh"))
#To combine two or more strings, use str_c()
str_c("a","bcd","efgh")
str_c("a","bcd","efgh",sep = "_")
#Like most other functions in R, missing values are contagious.
#If you want them to print as "NA", use
x <- c("abc", NA)
str_c("|-", x, "-|")
#> [1] "|-abc-|" NA
str_c("|-", str_replace_na(x), "-|")
str_c("abc",NA)
str_c("abc",str_replace_na(NA))
str_c("prefix-", c("a", "b", "c"), "-suffix")
# To collapse a vector of strings into a single string, use collapse:
str_c(c("x", "y", "z"))
str_c(c("x", "y", "z"), collapse = ", ")   #> [1] "x, y, z"
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 3)
# negative numbers count backwards from end
str_sub(x, -3, -1)
# Note that str_sub() won’t fail if the string is too short: it will just return as much as possible:
str_sub("a", 1, 5)
str_sub(x, 1, 1) <- str_to_lower(str_sub(x, 1, 1))
x
str_sub(x, 1, 1) <- str_to_upper(str_sub(x, 1, 1))
x
str_sub(x, 1, 2) <- str_to_upper(str_sub(x, 1, 2))
x
x <- c("Apple", "Banana", "Pear")
x <- c("apple", "banana", "pear")
str_view(x, "an")
#To learn regular expressions, we’ll use str_view() and str_view_all()
install.packages("htmlwidgets")
#To learn regular expressions, we’ll use str_view() and str_view_all()
#install.packages("htmlwidgets")
library(htmlwidgets)
x <- c("apple", "banana", "pear")
str_view(x, "an")
# to match any string, we use '.'
str_view(x,'.a.')
# to match any string, we use '.'
str_view(x,'a.')
str_view(x,'.a.')
#But what if we actually need to match a '.'
y = c("app","a.c","bef")
#how to match 'a.c' ? We use escape sequences here.
str_view(y, "a\\.c")
#how to match 'a.c' ? We use escape sequences here.
str_view(y, "a\.c")
# error ? Yes, we are placing that in a string, so it trying to check if there is any escape
# sequence as \.   There is nothing like that. So Errr.
#To Escape the escape sequence we nullify it by adding another \
str_view(y, "a\\.c")
x <- c("apple", "banana", "pear")
str_view(x, "^a")
str_view(x, "a$")
# To force a regular expression to only match a complete string, anchor it with both ^ and $
x <- c("apple pie", "apple", "apple cake")
str_view(x, "apple")
str_view(x, "^apple$")
\bsum\b
str_view(x,\bapple\b)
str_view(x,"\bapple\b")
str_view(x,"\bapple")
str_view(x,"apple\b")
#How would you match the literal string "$^$"?
x <- c("$^$")
str_view(x, "\$\^\$")
str_view(x, "$\^$")
str_view(x, "^$^$$")
str_view(x, "^\$^\$$")
str_view(x, "\^$^$$")
#How would you match the literal string "$^$"?
x <- c("$^$","^$^$$")
str_view(x, "^$^$$")
str_view(x, "^^$^$$$")
str_view(x, "^\\$\\^\\$$")
str_view(x, "^\$\^\$$")
it searches for escape sequences in STRINGS, but \\ is something
# we use as escape in REGEX
# if we try with single \, it searches for escape sequences in STRINGS, but \\ is something
# if we try with single \, it searches for escape sequences in STRINGS, but \\ is something
# we use as escape in REGEX
# if we try with single \, it searches for escape sequences in STRINGS, but \\ is something
# we use as escape in REGEX
# if we try with single \, it searches for escape sequences in STRINGS, but \\ is something
# we use as escape in REGEX
# if we try with single \, it searches for escape sequences in STRINGS, but \\ is something
# we use as escape in REGEX
str_view(x, "^\$\^\$$")
str_view(x, "^\\$\\^\\$$") # Perfect !
stringr::words
x = stringr::words
#1 Start with “y”.
str_view(x,"^y")
#1 Start with “y”.
str_match(x,"^y")
#1 Start with “y”.
str_extract(x,"^y")
x
#1 Start with “y”.
str_subset(x,"^y")
#2 End with “x”
str_subset(x,"$x")
#2 End with “x”
str_subset(x,"x$")
#3 Are exactly three letters long.
str_view(x,"^...$")
#3 Are exactly three letters long.
str_view(x,"...")
#3 Are exactly three letters long.
str_view(x,"^...")
#3 Are exactly three letters long.
str_view(x,"^...$")
#3 Are exactly three letters long.
str_subset(x,"^...$")
#4 Have seven letters or more.
str_subset(x, "^.......")
#4 Have seven letters or more.
str_subset(x, "^..........")
#4 Have seven letters or more.
str_subset(x, "^...........")
#4 Have seven letters or more.
str_subset(x, "^............")
#4 Have seven letters or more.
str_subset(x, "^.......")
min(str_length(str_subset(x,"^.......")))
min(str_length(str_subset(x,"^........")))
str_view(c("abc", "a.c", "a*c", "a c"), "a[.]c")
str_view(c("abc", "a.c", "a*c", "a c"), ".[*]c")
str_view(c("abc", "a.c", "a*c", "a c"), "a[ ]")
str_view(c("abc", "a.c", "a*c", "a c"), "a[ ]")
str_view(c("abc", "a.c", "a*c", "a(c"), "a[(]c")
str_view(c("abc", "a.c", "a*c", "a c"), "abc|d..f")
str_view(c("abc", "d..f", "a*c", "a c"), "abc|d..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf"), "abc|d..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d..."), "abc|d..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d..."), "abc|d..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d..."), "ab(c|d)..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abcegf"), "ab(c|d)..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abc..f"), "ab(c|d)..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abc..f","abcd..f"), "ab(c|d)..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abc..f","abd..f"), "ab(c|d)..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abc..f","abd..f","ab...f"), "ab(c|d)..f")
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abc..f","abd..f","ab...f","abcdef"), "ab(c|d)..f")
#Excercise
#1 Start with a vowel.
str_subset(x,"^aeiou")
#Excercise
#1 Start with a vowel.
str_subset(x,"^[aeiou]")
str_view(c("abc", "a.c", "a*c", "a(c"), "a[(*]c")
#2 That only contain consonants.
str_subset(x,"[^aeiou]")
#2 That only contain consonants.
str_subset(x,"[^(aeiou)]")
#2 That only contain consonants.
str_subset(x,"[^aeiou]")
#2 That only contain consonants.
str_subset(x,"[aeiou]")
#Excercise
#1 Start with a vowel.
length(str_subset(x,"^[aeiou]"))
#Excercise
#1 Start with a vowel.
str_subset(x,"^[aeiou]")
length(str_subset(x,"^[aeiou]"))
#Excercise
#1 Start with a vowel.
str_subset(x,"^[aeiou]")
#2 That only contain consonants.
str_subset(x,".[^aeiou].")
#2 That only contain consonants.
str_subset(x,"[aeiou]")
length(str_subset(x,"[aeiou]"))
str_match(x,"[aeiou]")
x[952]
str_match(x,"^[aeiou]")
str_match(x,"[^aeiou]")
length(str_subset(x,"[^aeiou]"))
str_view(c("abc", "d..f", "a*c", "a c","deaf","d...","abc..f","abd..f","ab...f","abcdef"), "ab(c|d)..f")
#2 That only contain consonants.
str_subset(x,"[^aeiou]")
str_match(x,"^[^aeiou]")
#2 That only contain consonants.
str_subset(x,"^[^aeiou]")
#2 That only contain consonants.
str_subset(x,"^[^aeiou]+$")
#3 End with ed, but not with eed.
str_sub(x,".[^e]ed$")
#3 End with ed, but not with eed.
str_sub(x,".[e]ed$")
#3 End with ed, but not with eed.
str_subset(x,".[^e]ed$")
#3 End with ed, but not with eed.
str_subset(x,".[e]ed$")
#4 End with ing or ise.
str_subset(x, ".(ing|ise)$")
#5 Create a regular expression that will match telephone numbers as commonly written in your country.
phones = c("+91 8099880974","8088776654")
str_subset(phones,"^[+91]\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$")
str_subset(phones,"^[+91]\\d\\d\\d\\d\\d\\d\\d\\d\\d$")
str_subset(phones,"^[+91]\\d$")
str_subset(phones,"^[+91]+[]+[\d{10}]$")
str_subset(phones,"^[+91]+[]+[\\d{10}]$")
str_subset(phones,"^[+91]+[ ]+[\\d{10}]$")
str_subset(phones,"^[\\d{10}]$")
str_subset(phones,"[\\d{10}]")
str_subset(phones,"[\\d{11}]")
str_subset(phones,"[\\d{8}]")
str_subset(phones,"[\\d{8}]$")
str_subset(phones,"[\\d{1}]$")
str_subset(phones,"^[+91]+[ ]+\\d{10}$")
str_subset(phones,"\\d{1}$")
str_subset(phones,"\\d{12}$")
str_subset(phones,"\\d{10}$")
str_subset(phones,"^\\d{10}$")
str_subset(phones,"^[+91][ ]+\\d{10}$")
str_subset(phones,"^[+91]+[ ]+\\d{10}$")
str_subset(phones,"^\\d{10}$")
amazon_alexa <- read.delim("D:/Learnings/DataScience/ML/Other Sources/amazon_alexa.tsv")
View(amazon_alexa)
mydata = amazon_alexa
mydata$ï..rating
table(mydata$ï..rating)
names(mydata)
names(mydata)=c("Ratings","Date","Variation","Verified_reviews","Feedback")
names(mydata)
table(mydata$ï..rating)
table(mydata$Ratings)
alexadata = read.table("amazon_alexa.tsv", sep = "\t", header = TRUE)
setwd("D:/Learnings/DataScience/ML/Other Sources")
alexadata = read.table("amazon_alexa.tsv", sep = "\t", header = TRUE)
names(mydata)=c("Ratings","Date","Variation","Verified_reviews","Feedback")
table(mydata$Ratings)
View(mydata)
str(mydata)
table(mydata$Variation)
mydata[mydata$Ratings == 5 && mydata$Variation == "Black  Dot",]
mydata[mydata$Ratings == 4 && mydata$Variation == "Black  Dot",]
mydata[mydata$Ratings == 1 && mydata$Variation == "Black  Dot",]
mydata[,mydata$Ratings == 1 && mydata$Variation == "Black  Dot"]
mydata[,mydata$Ratings == 1]
mydata[,mydata$Ratings = 1]
mydata[mydata$Ratings == 1,]
mydata[mydata$Ratings == 5 && mydata$Variation == "Black  Dot",]
mydata[mydata$Ratings == 5 && mydata$Variation == 1,]
mydata[mydata$Ratings == 5 && mydata$Variation == 2,]
str(mydata)
mydata[mydata$Ratings == 5 && mydata$Variation == 6,]
mydata[mydata$Ratings == 5 && mydata$Variation == '6',]
mydata[mydata$Variation == '6',]
mydata[mydata$Variation == 'Black Dot',]
table(mydata$Variation)
mydata[mydata$Variation == 'Charcoal Fabric',]
mydata[mydata$Variation == "Charcoal Fabric",]
str(mydata)
mydata[mydata$Variation == 6,]
mydata[mydata$Variation == '11',]
mydata[mydata$Date == "1-Jul-18",]
mydata[mydata$Date == "1-Jul-18","Ratings"]
str(mydata)
mydata[mydata$Variation == "Black","Ratings"]
mydata[mydata$Variation == "Black",]
mydata[mydata$Variation == "Black Dot",]
str(mydata)
mydata[mydata$Variation == "Black  Dot",]
mydata[mydata$Feedback == 0,]
tempdata = mydata[mydata$Feedback == 0,]
View(tempdata)
tempdata = mydata[mydata$Feedback == 1,]
table(tempdata$Ratings)
tempdata = mydata[mydata$Feedback == 0,]
View(tempdata)
table(tempdata$Ratings)
table(tempdata$)
table(tempdata$Variation)
tempdata = mydata[mydata$Feedback == 1,]
table(tempdata$Variation)
tempdata = mydata[mydata$Feedback == 0,]
table(tempdata$Variation)
